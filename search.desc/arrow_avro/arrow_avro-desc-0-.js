searchState.loadedDescShard("arrow_avro", 0, "Convert data to / from the Apache Arrow memory format and …\nExtension trait for AvroField to add Utf8View support\nData type conversions between Avro and Arrow types\nCompression codec implementations for Avro\nCore functionality for reading Avro data into Arrow arrays\nReturns a new field with Utf8View support enabled for …\nAn Avro datatype mapped to the arrow data model\nA named <code>AvroDataType</code>\nRepresents Avro bytes type, maps to Arrow’s Binary data …\nRepresents Avro boolean type, maps to Arrow’s Boolean …\nAn Avro encoding\nRepresents Avro date logical type, maps to Arrow’s …\nRepresents Avro fixed type, maps to Arrow’s …\nRepresents Avro float type, maps to Arrow’s Float32 data …\nRepresents Avro double type, maps to Arrow’s Float64 …\nRepresents Avro int type, maps to Arrow’s Int32 data type\nRepresents Avro long type, maps to Arrow’s Int64 data …\nRepresents Avro duration logical type, maps to Arrow’s …\nRepresents Avro array type, maps to Arrow’s List data …\nRepresents Avro map type, maps to Arrow’s Map data type\nRepresents Avro null type, maps to Arrow’s Null data type\nThe nulls are encoded as the first union variant\nThe nulls are encoded as the second union variant\nAvro types are not nullable, with nullability instead …\nResolves Avro type names to <code>AvroDataType</code>\nRepresents Avro record type, maps to Arrow’s Struct data …\nRepresents Avro time-micros logical type, maps to Arrow’…\nRepresents Avro time-millis logical type, maps to Arrow’…\nRepresents Avro timestamp-micros or local-timestamp-micros …\nRepresents Avro timestamp-millis or local-timestamp-millis …\nString data represented as UTF-8 encoded bytes, …\nString data represented as UTF-8 encoded bytes with an …\nReturns a reference to the codec used by this data type\nReturns the <code>AvroDataType</code>\nReturns the arrow <code>Field</code>\nReturns an arrow <code>Field</code> with the given name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a <code>AvroDataType</code> from the provided <code>Schema</code> and the …\nReturns the name of this Avro field\nCreate a new <code>AvroDataType</code> with the given parts.\nReturns the nullability status of this data type\nReturns a new <code>AvroField</code> with Utf8View support enabled\nConverts a string codec to use Utf8View if requested\nThe metadata key used for storing the JSON encoded …\nSupported compression codecs for Avro data\nDeflate compression (RFC 1951)\nSnappy compression\nZStandard compression\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration options for reading Avro data into Arrow …\nDecoder for <code>Block</code>\nReturns the argument unchanged.\nDecoder for <code>Header</code>\nCalls <code>U::from(self)</code>.\nCreate a new <code>ReadOptions</code> with default values\nReturn an iterator of <code>Block</code> from the provided <code>BufRead</code>\nRead a <code>Header</code> from the provided <code>BufRead</code>\nGet whether StringViewArray is enabled for string data\nSet whether to use StringViewArray for string data\nA file data block\nA decoder for <code>Block</code>\nThe number of objects in this block\nThe serialized objects within this block\nParse <code>Block</code> from <code>buf</code>, returning the number of bytes read\nFlush this decoder returning the parsed <code>Block</code> if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe sync marker\nA wrapper around a byte slice, providing low-level …\nReturns the argument unchanged.\nRead a single <code>u8</code>\nCalls <code>U::from(self)</code>.\nReturns the current cursor position\nDecoding a block count\nDecoding a block byte length\nFinished decoding\nA decoded header for an Object Container File\nA decoder for <code>Header</code>\nDecoding a key string\nDecoding a key length\nDecoding the <code>MAGIC</code> prefix\nDecoding sync marker\nDecoding a value payload\nDecoding a value length\nThe number of bytes remaining in the current string/bytes …\nReturns the <code>CompressionCodec</code> if any\nParse <code>Header</code> from <code>buf</code>, returning the number of bytes read\nFlush this decoder returning the parsed <code>Header</code> if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value for a given metadata key if present\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe raw binary data of the metadata map\nThe end offsets of strings in <code>meta_buf</code>\nReturns an iterator over the meta keys in this header\nReturns the <code>Schema</code> if any\nReturns the sync token for this file\nThe decoded sync marker\nThe number of remaining tuples in the current block\nDecodes avro encoded data into <code>RecordBatch</code>\nString data encoded as UTF-8 bytes, mapped to Arrow’s …\nString data encoded as UTF-8 bytes, but mapped to Arrow’…\nAppend a null record\nDecode <code>count</code> records from <code>buf</code>\nDecode a single record from <code>buf</code>\nFlush the decoded records into a <code>RecordBatch</code>\nFlush decoded records to an <code>ArrayRef</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RecordDecoder</code> from the provided <code>AvroDataType</code> …\nCreate a new <code>RecordDecoder</code> from the provided <code>AvroDataType</code> …\nDecoder for zig-zag encoded variable length (VLW) integers\nReturns the argument unchanged.\nScratch space for decoding VLQ integers\nCalls <code>U::from(self)</code>.\nDecode a signed long from <code>buf</code>\nRead a varint from <code>buf</code> returning the decoded <code>u64</code> and the …\nBased on\nAn array\nArray type: a sequence of values of the same type\nAdditional attributes within a <code>Schema</code>\nboolean: a binary value\nbytes: sequence of 8-bit unsigned bytes\nA complex type such as record, array, map, etc.\nA complex type\ndouble: double precision (64-bit) IEEE 754 floating-point …\nAn enumeration\nEnum type: a set of named values\nA field within a <code>Record</code>\nA fixed length binary array\nFixed type: a fixed-size byte array\nfloat: single precision (32-bit) IEEE 754 floating-point …\nint: 32-bit signed integer\nlong: 64-bit signed integer\nA map\nMap type: a mapping from strings to values of the same type\nnull: no value\nA primitive type like null, boolean, int, etc.\nA primitive type\nA record\nRecord type: a sequence of fields with names and types\nA reference to another named type\nThe metadata key used for storing the JSON encoded <code>Schema</code>\nAn Avro schema\nstring: Unicode character sequence\nA type definition that is not a variant of <code>ComplexType</code>\nA type with attributes\nEither a <code>PrimitiveType</code> or a reference to a previously …\nA direct type name (primitive or reference)\nA union of multiple schemas (e.g., [“null”, “string…\nAdditional JSON attributes\nAlternative names for this record\nAlternative names for this enum\nAlternative names for this fixed type\nAdditional attributes associated with this type\nAdditional attributes for this record\nAdditional attributes for this enum\nAdditional attributes for this array\nAdditional attributes for this map\nAdditional attributes for this fixed type\nOptional default value for this field\nOptional default value for this enum\nOptional documentation string for the record\nOptional documentation for this field\nOptional documentation string describing the enum\nReturns the field metadata for this <code>Attributes</code>\nThe fields contained in this record\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe schema for items in this array\nA logical type name\nName of the record\nName of the field within the record\nName of the enum\nName of the fixed type\nOptional namespace for the record, provides a way to …\nOptional namespace for the enum, provides organizational …\nOptional namespace for the fixed type\nThe number of bytes in this fixed type\nThe symbols (values) that this enum can have\nThe type of this Avro data structure\nThe field’s type definition\nThe schema for values in this map")